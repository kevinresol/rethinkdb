{'desc': 'Tests insertion into tables',
 'table_variable_name': 'tbl',
 'tests': [{'cd': "r.db('test').table_create('test2')",
            'ot': "partial({'tables_created':1})"},
           {'def': "tbl2 = r.db('test').table('test2')"},
           {'cd': "tbl.insert({'id':0,'a':0})",
            'ot': "{'deleted':0,'replaced':0,'unchanged':0,'errors':0,'skipped':0,'inserted':1}"},
           {'cd': 'tbl.count()', 'ot': '1'},
           {'js': "tbl.insert({id:1, a:1}, {durability:'hard'})",
            'ot': "{'deleted':0,'replaced':0,'unchanged':0,'errors':0,'skipped':0,'inserted':1}",
            'py': "tbl.insert({'id':1, 'a':1}, durability='hard')",
            'rb': "tbl.insert({ :id => 1, :a => 1 }, { :durability => 'hard' })"},
           {'cd': 'tbl.count()', 'ot': '2'},
           {'js': "tbl.insert({id:2, a:2}, {durability:'soft'})",
            'ot': "{'deleted':0,'replaced':0,'unchanged':0,'errors':0,'skipped':0,'inserted':1}",
            'py': "tbl.insert({'id':2, 'a':2}, durability='soft')",
            'rb': "tbl.insert({ :id => 2, :a => 2 }, { :durability => 'soft' })"},
           {'cd': 'tbl.count()', 'ot': '3'},
           {'js': "tbl.insert({id:3, a:3}, {durability:'wrong'})",
            'ot': 'err(\'ReqlQueryLogicError\', \'Durability option `wrong` unrecognized (options are "hard" and "soft").\', [0])',
            'py': "tbl.insert({'id':3, 'a':3}, durability='wrong')",
            'rb': "tbl.insert({ :id => 3, :a => 3 }, { :durability => 'wrong' })"},
           {'cd': 'tbl.count()', 'ot': '3'},
           {'cd': 'tbl.get(2).delete()',
            'ot': "{'deleted':1,'replaced':0,'unchanged':0,'errors':0,'skipped':0,'inserted':0}"},
           {'cd': "tbl.insert([{'id':2,'a':2}, {'id':3,'a':3}])",
            'ot': "{'deleted':0,'replaced':0,'unchanged':0,'errors':0,'skipped':0,'inserted':2}"},
           {'cd': 'tbl2.insert(tbl)',
            'ot': "{'deleted':0,'replaced':0,'unchanged':0,'errors':0,'skipped':0,'inserted':4}"},
           {'cd': "tbl.insert({'id':2,'b':20})",
            'ot': '{\'first_error\':"Duplicate primary key `id`:\\n{\\n\\t\\"a\\":\\t2,\\n\\t\\"id\\":\\t2\\n}\\n{\\n\\t\\"b\\":\\t20,\\n\\t\\"id\\":\\t2\\n}",\'deleted\':0,\'replaced\':0,\'unchanged\':0,\'errors\':1,\'skipped\':0,\'inserted\':0}'},
           {'js': "tbl.insert({'id':2,'b':20}, {conflict:'error'})",
            'ot': '{\'first_error\':"Duplicate primary key `id`:\\n{\\n\\t\\"a\\":\\t2,\\n\\t\\"id\\":\\t2\\n}\\n{\\n\\t\\"b\\":\\t20,\\n\\t\\"id\\":\\t2\\n}",\'deleted\':0,\'replaced\':0,\'unchanged\':0,\'errors\':1,\'skipped\':0,\'inserted\':0}',
            'py': "tbl.insert({'id':2,'b':20}, conflict='error')",
            'rb': "tbl.insert({:id => 2, :b => 20}, { :conflict => 'error' })"},
           {'js': "tbl.insert({'id':15,'b':20}, {conflict:'error'})",
            'ot': "{'deleted':0,'replaced':0,'unchanged':0,'errors':0,'skipped':0,'inserted':1}",
            'py': "tbl.insert({'id':15,'b':20}, conflict='error')",
            'rb': "tbl.insert({:id => 15, :b => 20}, { :conflict => 'error' })"},
           {'cd': 'tbl.get(15)', 'ot': "{'id':15,'b':20}"},
           {'js': "tbl.insert({'id':2,'b':20}, {conflict:'replace'})",
            'ot': "{'deleted':0,'replaced':1,'unchanged':0,'errors':0,'skipped':0,'inserted':0}",
            'py': "tbl.insert({'id':2,'b':20}, conflict='replace')",
            'rb': "tbl.insert({:id => 2, :b => 20}, { :conflict => 'replace' })"},
           {'cd': 'tbl.get(2)', 'ot': "{'id':2,'b':20}"},
           {'js': "tbl.insert({'id':20,'b':20}, {conflict:'replace'})",
            'ot': "{'deleted':0,'replaced':0,'unchanged':0,'errors':0,'skipped':0,'inserted':1}",
            'py': "tbl.insert({'id':20,'b':20}, conflict='replace')",
            'rb': "tbl.insert({:id => 20, :b => 20}, { :conflict => 'replace' })"},
           {'cd': 'tbl.get(20)', 'ot': "{'id':20,'b':20}"},
           {'js': "tbl.insert({'id':2,'c':30}, {conflict:'update'})",
            'ot': "{'deleted':0,'replaced':1,'unchanged':0,'errors':0,'skipped':0,'inserted':0}",
            'py': "tbl.insert({'id':2,'c':30}, conflict='update')",
            'rb': "tbl.insert({:id => 2, :c => 30}, { :conflict => 'update' })"},
           {'cd': 'tbl.get(2)', 'ot': "{'id':2, 'b':20, 'c':30}"},
           {'js': "tbl.insert({'id':30,'b':20}, {conflict:'update'})",
            'ot': "{'deleted':0,'replaced':0,'unchanged':0,'errors':0,'skipped':0,'inserted':1}",
            'py': "tbl.insert({'id':30,'b':20}, conflict='update')",
            'rb': "tbl.insert({:id => 30, :b => 20}, { :conflict => 'update' })"},
           {'cd': 'tbl.get(30)', 'ot': "{'id':30,'b':20}"},
           {'js': "tbl.insert({id:3, a:3}, {conflict:'wrong'})",
            'ot': 'err(\'ReqlQueryLogicError\', \'Conflict option `wrong` unrecognized (options are "error", "replace" and "update").\', [0])',
            'py': "tbl.insert({'id':3, 'a':3}, conflict='wrong')",
            'rb': "tbl.insert({ :id => 3, :a => 3 }, { :conflict => 'wrong' })"},
           {'def': "tblpkey = r.db('test').table('testpkey')",
            'js': "r.db('test').tableCreate('testpkey', {primaryKey:'foo'})",
            'ot': "partial({'tables_created':1})",
            'py': "r.db('test').table_create('testpkey', primary_key='foo')",
            'rb': "r.db('test').table_create('testpkey', { :primary_key => 'foo' })"},
           {'cd': 'tblpkey.insert({})',
            'ot': "{'deleted':0,'replaced':0,'generated_keys':arrlen(1,uuid()),'unchanged':0,'errors':0,'skipped':0,'inserted':1}"},
           {'cd': 'tblpkey', 'ot': "[{'foo':uuid()}]"},
           {'js': "tblpkey.insert({'b':20}, {conflict:'replace'})",
            'ot': "{'deleted':0,'replaced':0,'generated_keys':arrlen(1,uuid()),'unchanged':0,'errors':0,'skipped':0,'inserted':1}",
            'py': "tblpkey.insert({'b':20}, conflict='replace')",
            'rb': "tblpkey.insert({:b => 20}, { :conflict => 'replace' })"},
           {'js': "tblpkey.insert({'b':20}, {conflict:'update'})",
            'ot': "{'deleted':0,'replaced':0,'generated_keys':arrlen(1,uuid()),'unchanged':0,'errors':0,'skipped':0,'inserted':1}",
            'py': "tblpkey.insert({'b':20}, conflict='update')",
            'rb': "tblpkey.insert({:b => 20}, { :conflict => 'update' })"},
           {'cd': "r.db('test').table_drop('testpkey')",
            'ot': "partial({'tables_dropped':1})"},
           {'js': "tbl.forEach(function(row) { return tbl2.insert(row.merge({'id':row('id').add(100)})); })",
            'ot': "{'deleted':0,'replaced':0,'unchanged':0,'errors':0,'skipped':0,'inserted':7}",
            'py': "tbl.for_each(lambda  row:          tbl2.insert(row.merge({'id':row['id']  +  100 }))   )",
            'rb': "tbl.for_each(proc {  |row|          tbl2.insert(row.merge({'id'=>row['id']  +  100 }))  })"},
           {'cd': "tbl.insert({'value':r.minval})",
            'ot': "partial({'errors':1,'first_error':'`r.minval` and `r.maxval` cannot be written to disk.'})",
            'rb': 'tbl.insert({:value => r.minval})'},
           {'cd': "tbl.insert({'value':r.maxval})",
            'ot': "partial({'errors':1,'first_error':'`r.minval` and `r.maxval` cannot be written to disk.'})",
            'rb': 'tbl.insert({:value => r.maxval})'},
           {'ot': '{\'changes\': [{\'new_val\': {\'id\': 666}, \'old_val\': None},{\'error\': \'Duplicate primary key `id`:\\n{\\n\\t"id":\\t666\\n}\\n{\\n\\t"id":\\t666\\n}\',\'new_val\': {\'id\': 666},\'old_val\': {\'id\': 666}}],\'deleted\': 0,\'errors\': 1,\'first_error\': \'Duplicate primary key `id`:\\n{\\n\\t"id":\\t666\\n}\\n{\\n\\t"id":\\t666\\n}\',\'inserted\': 1,\'replaced\': 0,\'skipped\': 0,\'unchanged\': 0}',
            'py': 'tbl.insert([{\'id\':666}, {\'id\':666}], return_changes="always")'},
           {'ot': "partial({'changes':[{'old_val': None, 'new_val': {'id': 100+i, 'ordered-num': i}} for i in range(1,100)] })",
            'py': 'tbl.insert([{\'id\':100+i, \'ordered-num\':i} for i in range(1,100)], return_changes="always")'},
           {'ot': 'partial({\'changes\':[{\'old_val\': None, \'new_val\': {\'id\': [1,"blah", 200+i], \'ordered-num\': i}} for i in range(1,100)] })',
            'py': 'tbl.insert([{\'id\':[1, "blah", 200+i], \'ordered-num\':i} for i in range(1,100)], return_changes="always")'},
           {'ot': 'partial({\'changes\':[{\'old_val\': None, \'new_val\': {\'id\': [1,"blah", 300+i], \'ordered-num\': i}} for i in range(1,100)] })',
            'py': 'tbl.insert([{\'id\':[1, "blah", 300+i], \'ordered-num\':i} for i in range(1,100)], return_changes=true)'},
           {'ot': 'partial({\'changes\':[{\'old_val\': {\'id\':100+i, \'ordered-num\':i}, \'new_val\': {\'id\':100+i, \'ordered-num\':i}, \'error\':\'Duplicate primary key `id`:\\n{\\n\\t"id":\\t\'+str(100+i)+\',\\n\\t"ordered-num":\\t\'+str(i)+\'\\n}\\n{\\n\\t"id":\\t\'+str(100+i)+\',\\n\\t"ordered-num":\\t\'+str(i)+\'\\n}\'} for i in range(1,100)]})',
            'py': 'tbl.insert([{\'id\':100 + i, \'ordered-num\':i} for i in range(1,100)], return_changes="always")'},
           {'ot': '{\'changes\': [{\'error\': \'Duplicate primary key `id`:\\n{\\n\\t"id":\\t123,\\n\\t"ordered-num":\\t23\\n}\\n{\\n\\t"id":\\t123\\n}\', \'new_val\': {\'id\': 123, \'ordered-num\': 23}, \'old_val\': {\'id\': 123, \'ordered-num\': 23}}, {\'error\': \'Primary key too long (max 127 characters): "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"\', \'new_val\': None, \'old_val\': None}, {\'new_val\': {\'id\': 321}, \'old_val\': None}], \'deleted\': 0, \'errors\': 2, \'first_error\': \'Primary key too long (max 127 characters): "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"\', \'inserted\': 1, \'replaced\': 0, \'skipped\': 0, \'unchanged\': 0}',
            'py': 'tbl.insert([{\'id\':123}, {\'id\':\'a\'*500}, {\'id\':321}], return_changes="always")'},
           {'ot': "partial({'changes':[]})",
            'py': "tbl.insert([{'id':100 + i, 'ordered-num':i} for i in range(1,100)], return_changes=true)"},
           {'ot': "partial({'changes': [{'old_val': None, 'new_val': None, 'error': '`r.minval` and `r.maxval` cannot be written to disk.'}]})",
            'py': 'tbl.insert({\'a\':r.minval}, return_changes="always")'},
           {'cd': "tbl.insert({'id':42, 'foo':1, 'bar':1})",
            'ot': "partial({'inserted':1})"},
           {'ot': "partial({'replaced':1})",
            'py': 'tbl.insert({\'id\':42, \'foo\':5, \'bar\':5}, conflict=lambda id, old_row, new_row: old_row.merge(new_row.pluck("bar")))'},
           {'ot': "{'id':42, 'foo':1, 'bar':5}", 'py': 'tbl.get(42)'},
           {'ot': "partial({'replaced':1})",
            'rb': 'tbl.insert({:id=>42, :foo=>6, :bar=>6}, conflict: lambda {|id, old_row, new_row| return old_row.merge(new_row.pluck("bar"))})'},
           {'ot': "{'id':42, 'foo':1, 'bar':6}", 'rb': 'tbl.get(42)'},
           {'js': 'tbl.insert({\'id\':42, \'foo\':7, \'bar\':7}, {conflict: function(id, old_row, new_row) {return old_row.merge(new_row.pluck("bar"))}})',
            'ot': "partial({'replaced':1})"},
           {'js': 'tbl.get(42)', 'ot': "{'id':42, 'foo':1, 'bar':7}"},
           {'js': 'tbl.insert({id: "toggle"},{conflict: function(x,y,z) { return null},returnChanges: true})',
            'ot': "partial({'inserted': 1})"},
           {'js': 'tbl.insert({id: "toggle"},{conflict: function(x,y,z) { return null},returnChanges: true})',
            'ot': "partial({'deleted': 1})"},
           {'ot': "partial({'first_error': 'Inserted value must be an OBJECT (got NUMBER):\\n2'})",
            'py': "tbl.insert({'id':42, 'foo':1, 'bar':1}, conflict=lambda a,b,c: 2)"},
           {'ot': 'err("ReqlQueryLogicError", "The conflict function passed to `insert` should expect 3 arguments.")',
            'py': "tbl.insert({'id':42}, conflict=lambda a,b: a)"},
           {'ot': 'err("ReqlQueryLogicError", "The conflict function passed to `insert` must be deterministic.")',
            'py': "tbl.insert({'id':42}, conflict=lambda a,b,c: tbl.get(42))"},
           {'ot': "partial({'replaced': 1})",
            'py': "tbl.insert({'id':42}, conflict=lambda a,b,c: {'id':42, 'num':'424'})"},
           {'ot': "{'id':42, 'num':'424'}", 'py': 'tbl.get(42)'},
           {'cd': 'r.minval',
            'ot': "err('ReqlQueryLogicError','Cannot convert `r.minval` to JSON.')"},
           {'cd': 'r.maxval',
            'ot': "err('ReqlQueryLogicError','Cannot convert `r.maxval` to JSON.')"},
           {'cd': "r.db('test').table_drop('test2')",
            'ot': "partial({'tables_dropped':1})"}]}
