{'desc': 'Tests of converstion to and from the RQL binary type',
 'tests': [{'def': {'js': 's = Buffer("", \'binary\')',
                    'py': "s = b''",
                    'rb': 's = "".force_encoding(\'BINARY\')'}},
           {'cd': 'r.binary(s)', 'ot': 's'},
           {'cd': 'r.binary(s).count()', 'ot': '0'},
           {'def': {'js': 's = Buffer("\\x00", \'binary\')',
                    'py': "s = b'\\x00'",
                    'rb': 's = "\\x00".force_encoding(\'BINARY\')'}},
           {'cd': 'r.binary(s)', 'ot': 's'},
           {'cd': 'r.binary(s).count()', 'ot': '1'},
           {'def': {'js': 's = Buffer("\\x00\\x42", \'binary\')',
                    'py': "s = b'\\x00\\x42'",
                    'rb': 's = "\\x00\\x42".force_encoding(\'BINARY\')'}},
           {'cd': 'r.binary(s)', 'ot': 's'},
           {'cd': 'r.binary(s).count()', 'ot': '2'},
           {'def': {'js': 's = Buffer("\\x00\\xfe\\x7a", \'binary\')',
                    'py': "s = b'\\x00\\xfe\\x7a'",
                    'rb': 's = "\\x00\\xfe\\x7a".force_encoding(\'BINARY\')'}},
           {'cd': 'r.binary(s)', 'ot': 's'},
           {'cd': 'r.binary(s).count()', 'ot': '3'},
           {'def': {'js': 's = Buffer("\\xed\\xfe\\x00\\xba", \'binary\')',
                    'py': "s = b'\\xed\\xfe\\x00\\xba'",
                    'rb': 's = "\\xed\\xfe\\x00\\xba".force_encoding(\'BINARY\')'}},
           {'cd': 'r.binary(s)', 'ot': 's'},
           {'cd': 'r.binary(s).count()', 'ot': '4'},
           {'def': {'js': 's = Buffer("\\x50\\xf9\\x00\\x77\\xf9", \'binary\')',
                    'py': "s = b'\\x50\\xf9\\x00\\x77\\xf9'",
                    'rb': 's = "\\x50\\xf9\\x00\\x77\\xf9".force_encoding(\'BINARY\')'}},
           {'cd': 'r.binary(s)', 'ot': 's'},
           {'cd': 'r.binary(s).count()', 'ot': '5'},
           {'def': {'js': 's = Buffer("\\x2f\\xe3\\xb5\\x57\\x00\\x92", \'binary\')',
                    'py': "s = b'\\x2f\\xe3\\xb5\\x57\\x00\\x92'",
                    'rb': 's = "\\x2f\\xe3\\xb5\\x57\\x00\\x92".force_encoding(\'BINARY\')'}},
           {'cd': 'r.binary(s)', 'ot': 's'},
           {'cd': 'r.binary(s).count()', 'ot': '6'},
           {'def': {'js': 's = Buffer("\\xa9\\x43\\x54\\xe9\\x00\\xf8\\xfb", \'binary\')',
                    'py': "s = b'\\xa9\\x43\\x54\\xe9\\x00\\xf8\\xfb'",
                    'rb': 's = "\\xa9\\x43\\x54\\xe9\\x00\\xf8\\xfb".force_encoding(\'BINARY\')'}},
           {'cd': 'r.binary(s)', 'ot': 's'},
           {'cd': 'r.binary(s).count()', 'ot': '7'},
           {'def': {'js': 's = Buffer("\\x57\\xbb\\xe5\\x82\\x8b\\xd3\\x00\\xf9", \'binary\')',
                    'py': "s = b'\\x57\\xbb\\xe5\\x82\\x8b\\xd3\\x00\\xf9'",
                    'rb': 's = "\\x57\\xbb\\xe5\\x82\\x8b\\xd3\\x00\\xf9".force_encoding(\'BINARY\')'}},
           {'cd': 'r.binary(s)', 'ot': 's'},
           {'cd': 'r.binary(s).count()', 'ot': '8'},
           {'def': {'js': 's = Buffer("\\x44\\x1b\\x3e\\x00\\x13\\x19\\x29\\x2a\\xbf", \'binary\')',
                    'py': "s = b'\\x44\\x1b\\x3e\\x00\\x13\\x19\\x29\\x2a\\xbf'",
                    'rb': 's = "\\x44\\x1b\\x3e\\x00\\x13\\x19\\x29\\x2a\\xbf".force_encoding(\'BINARY\')'}},
           {'cd': 'r.binary(s)', 'ot': 's'},
           {'cd': 'r.binary(s).count()', 'ot': '9'},
           {'def': {'js': 's = Buffer("\\x8a\\x1d\\x09\\x00\\x5d\\x60\\x6b\\x2e\\x70\\xd9", \'binary\')',
                    'py': "s = b'\\x8a\\x1d\\x09\\x00\\x5d\\x60\\x6b\\x2e\\x70\\xd9'",
                    'rb': 's = "\\x8a\\x1d\\x09\\x00\\x5d\\x60\\x6b\\x2e\\x70\\xd9".force_encoding(\'BINARY\')'}},
           {'cd': 'r.binary(s)', 'ot': 's'},
           {'cd': 'r.binary(s).count()', 'ot': '10'},
           {'def': {'js': 's = Buffer("\\x00\\xaf\\x47\\x4b\\x38\\x99\\x14\\x8d\\x8f\\x10\\x51", \'binary\')',
                    'py': "s = b'\\x00\\xaf\\x47\\x4b\\x38\\x99\\x14\\x8d\\x8f\\x10\\x51'",
                    'rb': 's = "\\x00\\xaf\\x47\\x4b\\x38\\x99\\x14\\x8d\\x8f\\x10\\x51".force_encoding(\'BINARY\')'}},
           {'cd': 'r.binary(s)', 'ot': 's'},
           {'cd': 'r.binary(s).count()', 'ot': '11'},
           {'def': {'cd': 's = "\\x45\\x39\\x00\\xf7\\xc2\\x37\\xfd\\xe0\\x38\\x82\\x40\\xa9".force_encoding(\'BINARY\')',
                    'js': 's = Buffer("\\x45\\x39\\x00\\xf7\\xc2\\x37\\xfd\\xe0\\x38\\x82\\x40\\xa9", \'binary\')',
                    'py': "s = b'\\x45\\x39\\x00\\xf7\\xc2\\x37\\xfd\\xe0\\x38\\x82\\x40\\xa9'"}},
           {'cd': 'r.binary(s)', 'ot': 's'},
           {'cd': 'r.binary(s).count()', 'ot': '12'},
           {'def': {'js': 'a = Buffer("\\x00", \'binary\')',
                    'py': "a = b'\\x00'",
                    'rb': 'a = "\\x00".force_encoding(\'BINARY\')'}},
           {'def': {'js': 'b = Buffer("\\x00\\x01", \'binary\')',
                    'py': "b = b'\\x00\\x01'",
                    'rb': 'b = "\\x00\\x01".force_encoding(\'BINARY\')'}},
           {'def': {'js': 'c = Buffer("\\x01", \'binary\')',
                    'py': "c = b'\\x01'",
                    'rb': 'c = "\\x01".force_encoding(\'BINARY\')'}},
           {'def': {'js': 'd = Buffer("\\x70\\x22", \'binary\')',
                    'py': "d = b'\\x70\\x22'",
                    'rb': 'd = "\\x70\\x22".force_encoding(\'BINARY\')'}},
           {'def': {'js': 'e = Buffer("\\x80", \'binary\')',
                    'py': "e = b'\\x80'",
                    'rb': 'e = "\\x80".force_encoding(\'BINARY\')'}},
           {'def': {'js': 'f = Buffer("\\xFE", \'binary\')',
                    'py': "f = b'\\xFE'",
                    'rb': 'f = "\\xFE".force_encoding(\'BINARY\')'}},
           {'cd': 'r.binary(a).eq(r.binary(a))', 'ot': 'true'},
           {'cd': 'r.binary(a).le(r.binary(a))', 'ot': 'true'},
           {'cd': 'r.binary(a).ge(r.binary(a))', 'ot': 'true'},
           {'cd': 'r.binary(a).ne(r.binary(a))', 'ot': 'false'},
           {'cd': 'r.binary(a).lt(r.binary(a))', 'ot': 'false'},
           {'cd': 'r.binary(a).gt(r.binary(a))', 'ot': 'false'},
           {'cd': 'r.binary(a).ne(r.binary(b))', 'ot': 'true'},
           {'cd': 'r.binary(a).lt(r.binary(b))', 'ot': 'true'},
           {'cd': 'r.binary(a).le(r.binary(b))', 'ot': 'true'},
           {'cd': 'r.binary(a).ge(r.binary(b))', 'ot': 'false'},
           {'cd': 'r.binary(a).gt(r.binary(b))', 'ot': 'false'},
           {'cd': 'r.binary(a).eq(r.binary(b))', 'ot': 'false'},
           {'cd': 'r.binary(b).ne(r.binary(c))', 'ot': 'true'},
           {'cd': 'r.binary(b).lt(r.binary(c))', 'ot': 'true'},
           {'cd': 'r.binary(b).le(r.binary(c))', 'ot': 'true'},
           {'cd': 'r.binary(b).ge(r.binary(c))', 'ot': 'false'},
           {'cd': 'r.binary(b).gt(r.binary(c))', 'ot': 'false'},
           {'cd': 'r.binary(b).eq(r.binary(c))', 'ot': 'false'},
           {'cd': 'r.binary(c).ne(r.binary(d))', 'ot': 'true'},
           {'cd': 'r.binary(c).lt(r.binary(d))', 'ot': 'true'},
           {'cd': 'r.binary(c).le(r.binary(d))', 'ot': 'true'},
           {'cd': 'r.binary(c).ge(r.binary(d))', 'ot': 'false'},
           {'cd': 'r.binary(c).gt(r.binary(d))', 'ot': 'false'},
           {'cd': 'r.binary(c).eq(r.binary(d))', 'ot': 'false'},
           {'cd': 'r.binary(d).ne(r.binary(e))', 'ot': 'true'},
           {'cd': 'r.binary(d).lt(r.binary(e))', 'ot': 'true'},
           {'cd': 'r.binary(d).le(r.binary(e))', 'ot': 'true'},
           {'cd': 'r.binary(d).ge(r.binary(e))', 'ot': 'false'},
           {'cd': 'r.binary(d).gt(r.binary(e))', 'ot': 'false'},
           {'cd': 'r.binary(d).eq(r.binary(e))', 'ot': 'false'},
           {'cd': 'r.binary(e).ne(r.binary(f))', 'ot': 'true'},
           {'cd': 'r.binary(e).lt(r.binary(f))', 'ot': 'true'},
           {'cd': 'r.binary(e).le(r.binary(f))', 'ot': 'true'},
           {'cd': 'r.binary(e).ge(r.binary(f))', 'ot': 'false'},
           {'cd': 'r.binary(e).gt(r.binary(f))', 'ot': 'false'},
           {'cd': 'r.binary(e).eq(r.binary(f))', 'ot': 'false'},
           {'cd': 'r.binary(f).eq(r.binary(f))', 'ot': 'true'},
           {'cd': 'r.binary(f).le(r.binary(f))', 'ot': 'true'},
           {'cd': 'r.binary(f).ge(r.binary(f))', 'ot': 'true'},
           {'cd': 'r.binary(f).ne(r.binary(f))', 'ot': 'false'},
           {'cd': 'r.binary(f).lt(r.binary(f))', 'ot': 'false'},
           {'cd': 'r.binary(f).gt(r.binary(f))', 'ot': 'false'},
           {'py': {'cd': "r.binary(u'イロハニホヘト チリヌルヲ ワカヨタレソ ツネナラム'.encode('utf-8'))",
                   'ot': "u'イロハニホヘト チリヌルヲ ワカヨタレソ ツネナラム'.encode('utf-8')"},
            'py3': {'cd': "r.binary(str('イロハニホヘト チリヌルヲ ワカヨタレソ ツネナラム').encode('utf-8'))",
                    'ot': "str('イロハニホヘト チリヌルヲ ワカヨタレソ ツネナラム').encode('utf-8')"}},
           {'py': {'cd': "r.binary(u'ƀƁƂƃƄƅƆƇƈƉƊƋƌƍƎƏ'.encode('utf-16'))",
                   'ot': "u'ƀƁƂƃƄƅƆƇƈƉƊƋƌƍƎƏ'.encode('utf-16')"},
            'py3': {'cd': "r.binary(str('ƀƁƂƃƄƅƆƇƈƉƊƋƌƍƎƏ').encode('utf-16'))",
                    'ot': "str('ƀƁƂƃƄƅƆƇƈƉƊƋƌƍƎƏ').encode('utf-16')"}},
           {'py': {'cd': "r.binary(u'lorem ipsum'.encode('ascii'))",
                   'ot': "u'lorem ipsum'.encode('ascii')"},
            'py3': {'cd': "r.binary(str('lorem ipsum').encode('ascii'))",
                    'ot': "str('lorem ipsum').encode('ascii')"}},
           {'ot': "'foo'", 'py': "r.binary(b'foo').coerce_to('string')"},
           {'py': {'cd': "r.binary(u'イロハニホヘト チリヌルヲ ワカヨタレソ ツネナラム'.encode('utf-8')).coerce_to('string')",
                   'ot': "u'イロハニホヘト チリヌルヲ ワカヨタレソ ツネナラム'"},
            'py3': {'cd': "r.binary(str('イロハニホヘト チリヌルヲ ワカヨタレソ ツネナラム').encode('utf-8')).coerce_to('string')",
                    'ot': "str('イロハニホヘト チリヌルヲ ワカヨタレソ ツネナラム')"}},
           {'py': {'cd': "r.binary(u'lorem ipsum'.encode('ascii')).coerce_to('string')",
                   'ot': "u'lorem ipsum'"},
            'py3': {'cd': "r.binary(str('lorem ipsum').encode('ascii')).coerce_to('string')",
                    'ot': "str('lorem ipsum')"}},
           {'ot': "b'foo'", 'py': "r.expr('foo').coerce_to('binary')"},
           {'cd': "r.binary(a).coerce_to('bool')", 'ot': 'True'},
           {'ot': "b'foo'", 'py': "r.binary(b'foo').coerce_to('binary')"},
           {'ot': "b'ef'", 'py': "r.binary(b'abcdefg').slice(-3,-1)"},
           {'ot': "b'ab'", 'py': "r.binary(b'abcdefg').slice(0, 2)"},
           {'ot': "b'def'", 'py': "r.binary(b'abcdefg').slice(3, -1)"},
           {'ot': "b'cde'", 'py': "r.binary(b'abcdefg').slice(-5, 5)"},
           {'ot': "b'ab'", 'py': "r.binary(b'abcdefg').slice(-8, 2)"},
           {'ot': "b'fg'", 'py': "r.binary(b'abcdefg').slice(5, 7)"},
           {'ot': "b'ab'", 'py': "r.binary(b'abcdefg').slice(-9, 2)"},
           {'ot': "b'fg'", 'py': "r.binary(b'abcdefg').slice(5, 9)"},
           {'cd': 'r.binary(b)',
            'ot': 'b',
            'runopts': {'binary_format': '"native"'}},
           {'cd': 'r.binary(b)',
            'ot': "{'$reql_type$':'BINARY','data':'AAE='}",
            'runopts': {'binary_format': '"raw"'}},
           {'cd': 'r.binary(r.expr("data"))',
            'ot': {'js': 'Buffer("data", "binary")',
                   'py': 'b"data"',
                   'rb': '"data"'}},
           {'cd': 'r.binary(r.expr({}))',
            'ot': "err('ReqlQueryLogicError', 'Expected type STRING but found OBJECT.', [])"},
           {'cd': 'r.binary(r.expr([]))',
            'ot': "err('ReqlQueryLogicError', 'Expected type STRING but found ARRAY.', [])"},
           {'ot': "err('ReqlQueryLogicError','Invalid binary pseudotype:'+' lacking `data` key.',[])",
            'py': "r.expr({'$reql_type$':'BINARY'})",
            'rb': "r.expr({'$reql_type$':'BINARY'})"},
           {'ot': "err('ReqlQueryLogicError','Invalid base64 format, data found after padding character \\'=\\'.',[])",
            'py': "r.expr({'$reql_type$':'BINARY','data':'ABCDEFGH==AA'})"},
           {'ot': "err('ReqlQueryLogicError','Invalid base64 format, data found after padding character \\'=\\'.',[])",
            'py': "r.expr({'$reql_type$':'BINARY','data':'ABCDEF==$'})"},
           {'ot': "err('ReqlQueryLogicError','Invalid base64 character found:'+' \\'^\\'.',[])",
            'py': "r.expr({'$reql_type$':'BINARY','data':'A^CDEFGH'})"},
           {'ot': "err('ReqlQueryLogicError','Invalid base64 length:'+' 1 character remaining, cannot decode a full byte.',[])",
            'py': "r.expr({'$reql_type$':'BINARY','data':'ABCDE'})"},
           {'cd': "r.binary(a).coerce_to('array')",
            'ot': "err('ReqlQueryLogicError','Cannot coerce BINARY to ARRAY.',[])"},
           {'cd': "r.binary(a).coerce_to('object')",
            'ot': "err('ReqlQueryLogicError','Cannot coerce BINARY to OBJECT.',[])"},
           {'cd': "r.binary(a).coerce_to('number')",
            'ot': "err('ReqlQueryLogicError','Cannot coerce BINARY to NUMBER.',[])"},
           {'cd': "r.binary(a).coerce_to('nu'+'ll')",
            'ot': "err('ReqlQueryLogicError','Cannot coerce BINARY to NULL.',[])"}]}
