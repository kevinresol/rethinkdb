{'desc': 'Tests the RQL `map` function',
 'tests': [{'js': 'r.range().map(r.range(), function(x, y){return [x, y]}).type_of()',
            'ot': "'STREAM'",
            'py': 'r.range().map(r.range(), lambda x, y:(x, y)).type_of()',
            'rb': 'r.range().map(r.range()){|x, y| [x, y]}.type_of()'},
           {'js': 'r.range().map(r.expr([]), function(x, y){return [x, y]}).type_of()',
            'ot': "'STREAM'",
            'py': 'r.range().map(r.expr([]), lambda x, y:(x, y)).type_of()',
            'rb': 'r.range().map(r.expr([])){|x, y| [x, y]}.type_of()'},
           {'js': 'r.expr([]).map(r.expr([]), function(x, y){return [x, y]}).type_of()',
            'ot': "'ARRAY'",
            'py': 'r.expr([]).map(r.expr([]), lambda x, y:(x, y)).type_of()',
            'rb': 'r.expr([]).map(r.expr([])){|x, y| [x, y]}.type_of()'},
           {'js': 'r.range(3).map(function(){return 0})',
            'ot': '[0, 0, 0]',
            'py': 'r.range(3).map(lambda:0)',
            'rb': 'r.map(r.range(3)){0}'},
           {'js': 'r.range(3).map(r.range(4), function(){return 0})',
            'ot': '[0, 0, 0]',
            'py': 'r.range(3).map(r.range(4), lambda x,y:0)',
            'rb': 'r.range(3).map(r.range(4)){0}'},
           {'js': 'r.expr([1]).map(function(x){return [x]})',
            'ot': '[[1]]',
            'py': 'r.expr([1]).map(lambda x:(x,))',
            'rb': 'r.map(r.expr([1])){|x| [x]}'},
           {'js': 'r.expr([1]).map(r.expr([1]), function(x, y){return [x, y]})',
            'ot': '[[1, 1]]',
            'py': 'r.expr([1]).map(r.expr([1]), lambda x, y:(x, y))',
            'rb': 'r.map(r.expr([1]), r.expr([1])){|x, y| [x, y]}'},
           {'js': 'r.expr([1]).map(r.expr([1]), r.expr([1]), function(x, y, z){return [x, y, z]})',
            'ot': '[[1, 1, 1]]',
            'py': 'r.expr([1]).map(r.expr([1]), r.expr([1]), lambda x, y, z:(x, y, z))',
            'rb': 'r.map(r.expr([1]), r.expr([1]), r.expr([1])){|x, y, z| [x, y, z]}'},
           {'js': 'r.expr([1]).map(function(x, y){return [x, y]})',
            'ot': 'err("ReqlQueryLogicError", "The function passed to `map` expects 2 arguments, but 1 sequence was found.", [])',
            'py': 'r.expr([1]).map(lambda x, y:(x, y))',
            'rb': 'r.map(r.expr([1])){|x, y| [x, y]}'},
           {'js': 'r.expr([1]).map(r.expr([1]), function(x){return [x]})',
            'ot': 'err("ReqlQueryLogicError", "The function passed to `map` expects 1 argument, but 2 sequences were found.", [])',
            'py': 'r.expr([1]).map(r.expr([1]), lambda x:(x,))',
            'rb': 'r.map(r.expr([1]), r.expr([1])){|x| [x]}'},
           {'js': 'r.range().map(r.expr([]), function(x, y){return [x, y]})',
            'ot': '[]',
            'py': 'r.range().map(r.expr([]), lambda x, y:(x, y))',
            'rb': 'r.map(r.range(), r.expr([])){|x, y| [x, y]}'},
           {'js': 'r.expr([1, 2]).map(r.expr([1, 2, 3, 4]), function(x, y){return [x, y]})',
            'ot': '[[1, 1], [2, 2]]',
            'py': 'r.expr([1, 2]).map(r.expr([1, 2, 3, 4]), lambda x, y:(x, y))',
            'rb': 'r.map(r.expr([1, 2]), r.expr([1, 2, 3, 4])){|x, y| [x, y]}'},
           {'js': 'r.range(2).map(r.range(4), function(x, y){return [x, y]})',
            'ot': '[[0, 0], [1, 1]]',
            'py': 'r.range(2).map(r.range(4), lambda x, y:(x, y))',
            'rb': 'r.map(r.range(2), r.range(4)){|x, y| [x, y]}'},
           {'js': 'r.range().map(r.expr([1, 2, 3, 4]), function(x, y){return [x, y]})',
            'ot': '[[0, 1], [1, 2], [2, 3], [3, 4]]',
            'py': 'r.range().map(r.expr([1, 2, 3, 4]), lambda x, y:(x, y))',
            'rb': 'r.map(r.range(), r.expr([1, 2, 3, 4])){|x, y| [x, y]}'},
           {'cd': 'r.range(3).map(r.range(5), r.js("(function(x, y){return [x, y];})"))',
            'ot': '[[0, 0], [1, 1], [2, 2]]'},
           {'js': 'r.range().map(r.expr(1), function(x, y){return [x, y]})',
            'ot': 'err("ReqlQueryLogicError", "Cannot convert NUMBER to SEQUENCE", [])',
            'py': 'r.range().map(r.expr(1), lambda x, y:(x, y))',
            'rb': 'r.map(r.range(), r.expr(1)){|x, y| [x, y]}'},
           {'js': 'r.range().map(r.range(), function(x, y){return [x, y]}).count()',
            'ot': 'err("ReqlQueryLogicError", "Cannot use an infinite stream with an aggregation function (`reduce`, `count`, etc.) or coerce it to an array.", [])',
            'py': 'r.range().map(r.range(), lambda x, y:(x, y)).count()',
            'rb': 'r.map(r.range(), r.range()){|x, y| [x, y]}.count()'},
           {'js': 'r.map(r.range(3), function(x){return [x]})',
            'ot': '[[0], [1], [2]]',
            'py': 'r.map(r.range(3), lambda x:(x,))',
            'rb': 'r.map(r.range(3), lambda {|x| [x]})'},
           {'js': 'r.map(r.range(3), r.row.add(1))',
            'ot': '[1, 2, 3]',
            'py': 'r.map(r.range(3), r.row + 1)'},
           {'js': 'r.map(r.range(3), r.range(5), function(x, y){return [x, y]})',
            'ot': '[[0, 0], [1, 1], [2, 2]]',
            'py': 'r.map(r.range(3), r.range(5), lambda x, y:(x, y))',
            'rb': 'r.map(r.range(3), r.range(5)){|x, y| [x, y]}'}]}
