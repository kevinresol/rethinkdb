package ;
import rethinkdb.RethinkDB.r;
import rethinkdb.reql.*;
class TestArity extends TestBase {
	override function test() {
		var db = r.db("test");
		var obj = r.expr({ "a" : 1 });
		var array = r.expr([1]);
		assertError("ReqlCompileError", "Expected 0 arguments but found 1.", r.dbList(1));
		assertError("ReqlCompileError", "Expected 1 argument but found 2.", tbl.zip(1));
		assertError("ReqlCompileError", "Expected 1 argument but found 2.", tbl.isEmpty(1));
		assertError("ReqlCompileError", "Expected 1 argument but found 2.", obj.keys(1));
		assertError("ReqlCompileError", "Expected 1 argument but found 2.", tbl.distinct(1));
		assertError("ReqlCompileError", "Expected 1 argument but found 2.", tbl.delete(1));
		assertError("ReqlCompileError", "Expected 1 argument but found 0.", r.dbCreate());
		assertError("ReqlCompileError", "Expected 1 argument but found 0.", r.dbDrop());
		assertError("ReqlCompileError", "Expected 1 argument but found 0.", r.db());
		assertError("ReqlCompileError", "Expected 1 argument but found 0.", r.floor());
		assertError("ReqlCompileError", "Expected 1 argument but found 0.", r.ceil());
		assertError("ReqlCompileError", "Expected 1 argument but found 0.", r.round());
		assertError("ReqlQueryLogicError", "Empty ERROR term outside a default block.", r.error());
		assertError("ReqlCompileError", "Expected 1 argument but found 0.", r.js());
		assertErrorRegex("TypeError", ".* takes at least 1 (?:positional )?argument \(0 given\)", r.expr());
		assertError("ReqlCompileError", "Expected 2 arguments but found 1.", tbl.concatMap());
		assertError("ReqlCompileError", "Expected 2 arguments but found 1.", tbl.skip());
		assertError("ReqlCompileError", "Expected 2 arguments but found 1.", tbl.limit());
		assertError("ReqlCompileError", "Expected 2 arguments but found 1.", array.append());
		assertError("ReqlCompileError", "Expected 2 arguments but found 1.", array.prepend());
		assertError("ReqlCompileError", "Expected 2 arguments but found 1.", array.difference());
		assertError("ReqlCompileError", "Expected 2 arguments but found 1.", array.setInsert());
		assertError("ReqlCompileError", "Expected 2 arguments but found 1.", array.setUnion());
		assertError("ReqlCompileError", "Expected 2 arguments but found 1.", array.setIntersection());
		assertError("ReqlCompileError", "Expected 2 arguments but found 1.", array.setDifference());
		assertError("ReqlCompileError", "Expected 2 arguments but found 1.", tbl.nth());
		assertError("ReqlCompileError", "Expected 2 arguments but found 1.", tbl.forEach());
		assertError("ReqlCompileError", "Expected 2 arguments but found 1.", tbl.get());
		assertError("ReqlCompileError", "Expected 2 arguments but found 1.", r.expr([]).sample());
		assertError("ReqlCompileError", "Expected 2 arguments but found 1.", tbl.offsetsOf());
		assertError("ReqlCompileError", "Expected 1 argument but found 2.", r.dbCreate(1, 2));
		assertError("ReqlCompileError", "Expected 1 argument but found 2.", r.dbDrop(1, 2));
		assertError("ReqlCompileError", "Expected 1 argument but found 2.", r.db(1, 2));
		assertError("ReqlCompileError", "Expected 1 argument but found 2.", r.floor(1, 2));
		assertError("ReqlCompileError", "Expected 1 argument but found 2.", r.ceil(1, 2));
		assertError("ReqlCompileError", "Expected 1 argument but found 2.", r.round(1, 2));
		assertError("ReqlCompileError", "Expected 2 arguments but found 1.", tbl.filter());
		assertError("ReqlCompileError", "Expected between 0 and 1 arguments but found 2.", r.error(1, 2));
		assertError("ReqlQueryLogicError", "Expected type DATUM but found DATABASE:", db.tableDrop());
		assertError("ReqlQueryLogicError", "Expected type DATUM but found DATABASE:", db.tableCreate());
		assertError("ReqlCompileError", "Expected 1 argument but found 2.", r.js(1, 2));
		assertError("ReqlCompileError", "Expected 2 arguments but found 3.", tbl.concatMap(1, 2));
		assertError("ReqlCompileError", "Expected 2 arguments but found 3.", tbl.skip(1, 2));
		assertError("ReqlCompileError", "Expected 2 arguments but found 3.", tbl.limit(1, 2));
		assertError("ReqlCompileError", "Expected 2 arguments but found 3.", array.append(1, 2));
		assertError("ReqlCompileError", "Expected 2 arguments but found 3.", array.prepend(1, 2));
		assertError("ReqlCompileError", "Expected 2 arguments but found 3.", array.difference([], []));
		assertError("ReqlCompileError", "Expected 2 arguments but found 3.", array.setInsert(1, 2));
		assertError("ReqlCompileError", "Expected 2 arguments but found 3.", array.setUnion([1], [2]));
		assertError("ReqlCompileError", "Expected 2 arguments but found 3.", array.setIntersection([1], [2]));
		assertError("ReqlCompileError", "Expected 2 arguments but found 3.", array.setDifference([1], [2]));
		assertError("ReqlCompileError", "Expected 2 arguments but found 3.", tbl.nth(1, 2));
		assertError("ReqlCompileError", "Expected 2 arguments but found 3.", tbl.forEach(1, 2));
		assertError("ReqlCompileError", "Expected 2 arguments but found 3.", tbl.get(1, 2));
		assertError("ReqlCompileError", "Expected 2 arguments but found 3.", r.expr([]).sample(1, 2));
		assertError("ReqlCompileError", "Expected 2 arguments but found 3.", tbl.offsetsOf(1, 2));
		assertError("ReqlCompileError", "Expected 2 arguments but found 4.", tbl.filter(1, 2, 3));
		assertError("ReqlCompileError", "Expected between 1 and 2 arguments but found 3.", db.tableDrop(1, 2));
		assertError("ReqlCompileError", "Expected between 2 and 3 arguments but found 1.", r.expr([]).deleteAt());
		assertError("ReqlCompileError", "Expected between 1 and 2 arguments but found 3.", db.tableCreate(1, 2));
		assertError("ReqlCompileError", "Expected between 1 and 2 arguments but found 3.", tbl.count(1, 2));
		assertError("ReqlCompileError", "Expected 2 arguments but found 1.", tbl.update());
		assertError("ReqlCompileError", "Expected 2 arguments but found 1.", tbl.replace());
		assertError("ReqlCompileError", "Expected 2 arguments but found 1.", tbl.insert());
		assertError("ReqlQueryLogicError", "Expected type DATUM but found DATABASE:", db.table());
		assertError("ReqlCompileError", "Expected 2 arguments but found 1.", tbl.reduce());
		assertError("ReqlCompileError", "Expected 3 arguments but found 1.", tbl.eqJoin());
		assertError("ReqlCompileError", "Expected 3 arguments but found 1.", tbl.innerJoin());
		assertError("ReqlCompileError", "Expected 3 arguments but found 1.", tbl.outerJoin());
		assertError("ReqlCompileError", "Expected 3 arguments but found 1.", r.expr([]).insertAt());
		assertError("ReqlCompileError", "Expected 3 arguments but found 1.", r.expr([]).spliceAt());
		assertError("ReqlCompileError", "Expected 3 arguments but found 1.", r.expr([]).changeAt());
		assertError("ReqlCompileError", "Expected 3 arguments but found 2.", tbl.eqJoin(1));
		assertError("ReqlCompileError", "Expected 3 arguments but found 2.", tbl.innerJoin(1));
		assertError("ReqlCompileError", "Expected 3 arguments but found 2.", tbl.outerJoin(1));
		assertError("ReqlCompileError", "Expected 3 arguments but found 2.", r.expr([]).insertAt(1));
		assertError("ReqlCompileError", "Expected 3 arguments but found 2.", r.expr([]).spliceAt(1));
		assertError("ReqlCompileError", "Expected 3 arguments but found 2.", r.expr([]).changeAt(1));
		assertError("ReqlCompileError", "Expected 3 arguments but found 5.", tbl.eqJoin(1, 2, 3, 4));
		assertError("ReqlCompileError", "Expected 3 arguments but found 4.", tbl.innerJoin(1, 2, 3));
		assertError("ReqlCompileError", "Expected 3 arguments but found 4.", tbl.outerJoin(1, 2, 3));
		assertError("ReqlCompileError", "Expected 3 arguments but found 4.", r.expr([]).insertAt(1, 2, 3));
		assertError("ReqlCompileError", "Expected 3 arguments but found 4.", r.expr([]).spliceAt(1, 2, 3));
		assertError("ReqlCompileError", "Expected 3 arguments but found 4.", r.expr([]).changeAt(1, 2, 3));
		assertError("ReqlCompileError", "Expected 2 or more arguments but found 1.", tbl.map());
		assertError("ReqlCompileError", "Expected 3 or more arguments but found 2.", r.branch(1, 2));
		assertError("ReqlQueryLogicError", "Cannot call `branch` term with an even number of arguments.", r.branch(1, 2, 3, 4));
		assertAtom(10, tbl.insert([{ "id" : 0 }, { "id" : 1 }, { "id" : 2 }, { "id" : 3 }, { "id" : 4 }, { "id" : 5 }, { "id" : 6 }, { "id" : 7 }, { "id" : 8 }, { "id" : 9 }]).getField("inserted"));
		assertAtom("bag([0, 1, 2])", tbl.getAll(0, 1, 2).getField("id"));
		assertAtom("bag([0, 1, 2])", tbl.getAll(r.args([]), 0, 1, 2).getField("id"));
		assertAtom("bag([0, 1, 2])", tbl.getAll(r.args([0]), 1, 2).getField("id"));
		assertAtom("bag([0, 1, 2])", tbl.getAll(r.args([0, 1]), 2).getField("id"));
		assertAtom("bag([0, 1, 2])", tbl.getAll(r.args([0, 1, 2])).getField("id"));
		assertAtom("bag([0, 1, 2])", tbl.getAll(r.args([0]), 1, r.args([2])).getField("id"));
		assertAtom(1, r.branch(true, 1, r.error("a")));
		assertAtom(1, r.branch(r.args([true, 1]), r.error("a")));
		assertAtom(1, r.expr(true).branch(1, 2));
		assertError("ReqlUserError", "a", r.branch(r.args([true, 1, r.error("a")])));
		assertAtom([{ "group" : 0, "reduction" : 1 }], tbl.group(function(row) return row["id"].mod(2)).count({ "id" : 0 }).ungroup());
		assertAtom([{ "group" : 0, "reduction" : 1 }], tbl.group(r.row["id"].mod(2)).count(r.args([{ "id" : 0 }])).ungroup());
		assertAtom({ "a" : { "c" : 1 } }, r.expr({ "a" : { "b" : 1 } }).merge(r.args([{ "a" : r.literal({ "c" : 1 }) }])));
		assertErrorRegex("TypeError", ".*takes exactly 1 argument \(2 given\)", r.http("httpbin.org/get", "bad_param"));
		assertErrorRegex("TypeError", ".*takes exactly 1 argument \(2 given\)", r.binary("1", "2"));
		assertErrorRegex("TypeError", ".*takes exactly 1 argument \(0 given\)", r.binary());
		assertError("ReqlCompileError", "Expected 3 arguments but found 2.", tbl.indexRename("idx"));
		assertError("ReqlCompileError", "Expected 3 arguments but found 4.", tbl.indexRename("idx", "idx2", "idx3"));
		assertError("ReqlServerCompileError", "Expected 0 arguments but found 1.", r.now("foo"));
		assertError("ReqlQueryLogicError", "Expected 0 arguments but found 3.", r.now(r.args([1, 2, 3])));
	}
}