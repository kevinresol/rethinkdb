package sindex;
import rethinkdb.RethinkDB.r;
import rethinkdb.reql.*;
using tink.CoreApi;

@:await class TestApi extends TestBase {
	@:async
	override function test() {
		var _tables = ["tbl"];
		@:await createTables(_tables);
		var tbl = r.db("test").table("tbl");
		var rows = [{ "id" : 0, "a" : 0, "b" : 0, "c" : 0, "m" : [1, 2, 3] }, { "id" : 1, "a" : 0, "b" : 0, "c" : 0, "m" : [4, 5, 6] }, { "id" : 2, "a" : 0, "b" : 0, "c" : 1, "m" : 7 }, { "id" : 3, "a" : 0, "b" : 1, "c" : 1, "m" : [10, 11, 12] }, { "id" : 4, "a" : 4, "b" : 4, "c" : 4, "m" : [14, 15, 16] }];
		@:await assertAtom(({ "deleted" : 0, "inserted" : 4, "skipped" : 0, "errors" : 0, "replaced" : 0, "unchanged" : 0 }), tbl.insert([{ "id" : 0, "a" : 0, "b" : 0, "c" : 0, "m" : [1, 2, 3] }, { "id" : 1, "a" : 0, "b" : 0, "c" : 0, "m" : [4, 5, 6] }, { "id" : 2, "a" : 0, "b" : 0, "c" : 1, "m" : 7 }, { "id" : 3, "a" : 0, "b" : 1, "c" : 1, "m" : [10, 11, 12] }]));
		@:await assertAtom({ "created" : 1 }, tbl.indexCreate("rename-foo", r.row["b"]));
		@:await assertAtom({ "created" : 1 }, tbl.indexCreate("rename-bar", r.row["c"]));
		@:await assertErrorRegex("ReqlOpFailedError", "Index `rename-foo` does not exist or index `rename-bar` already exists on table `[a-zA-Z0-9_]+.[a-zA-Z0-9_]+`[.]", tbl.indexRename("rename-foo", "rename-bar"));
		@:await assertErrorRegex("ReqlOpFailedError", "Index `rename-fake` does not exist or index `rename-stuff` already exists on table `[a-zA-Z0-9_]+.[a-zA-Z0-9_]+`[.]", tbl.indexRename("rename-fake", "rename-stuff"));
		@:await assertError("ReqlQueryLogicError", "Index name conflict:" + " `id` is the name of the primary key.", tbl.indexRename("id", "rename-stuff"));
		@:await assertError("ReqlQueryLogicError", "Index name conflict:" + " `id` is the name of the primary key.", tbl.indexRename("rename-stuff", "id"));
		@:await assertAtom({ "renamed" : 0 }, tbl.indexRename("rename-foo", "rename-foo"));
		@:await assertAtom({ "renamed" : 0 }, tbl.indexRename("rename-foo", "rename-foo", { "overwrite" : true }));
		@:await assertAtom({ "renamed" : 1 }, tbl.indexRename("rename-foo", "rename-bar", { "overwrite" : true }));
		@:await assertAtom({ "renamed" : 1 }, tbl.indexRename("rename-bar", "rename-stuff", { "overwrite" : true }));
		@:await assertAtom({ "renamed" : 1 }, tbl.indexRename("rename-stuff", "rename-last"));
		@:await assertAtom({ "created" : 1 }, tbl.indexCreate("minval", function() return r.minval));
		@:await assertAtom({ "created" : 1 }, tbl.indexCreate("maxval", function() return r.maxval));
		@:await assertAtom(bag([{ "index" : "rename-last", "ready" : true }, { "index" : "minval", "ready" : true }, { "index" : "maxval", "ready" : true }]), tbl.indexWait("rename-last", "minval", "maxval").pluck("index", "ready"));
		@:await assertAtom(3, tbl.getAll(0, { "index" : "rename-last" }).count());
		@:await assertAtom(0, tbl.getAll(r.minval, { "index" : "minval" }).count());
		@:await assertAtom(0, tbl.getAll(r.maxval, { "index" : "maxval" }).count());
		@:await assertAtom(0, tbl.between(r.minval, r.maxval, { "index" : "minval" }).count());
		@:await assertAtom({ "created" : 1 }, tbl.indexCreate("rename-last-dup", tbl.indexStatus("rename-last").nth(0).getField("function")));
		@:await assertAtom([{ "index" : "rename-last-dup", "ready" : true }], tbl.indexWait("rename-last-dup").pluck("index", "ready"));
		@:await assertAtom(3, tbl.getAll(0, { "index" : "rename-last-dup" }).count());
		@:await assertAtom({ "dropped" : 1 }, tbl.indexDrop("rename-last-dup"));
		@:await assertAtom({ "dropped" : 1 }, tbl.indexDrop("minval"));
		@:await assertAtom({ "dropped" : 1 }, tbl.indexDrop("maxval"));
		@:await assertAtom(["rename-last"], tbl.indexList());
		@:await assertAtom({ "dropped" : 1 }, tbl.indexDrop("rename-last"));
		@:await assertAtom({ "created" : 1 }, tbl.indexCreate("ai", r.row["a"]));
		@:await assertErrorRegex("ReqlOpFailedError", "Index `ai` already exists on table `[a-zA-Z0-9_]+.[a-zA-Z0-9_]+`[.]", tbl.indexCreate("ai", r.row["a"]));
		@:await assertAtom({ "created" : 1 }, tbl.indexCreate("bi", r.row["b"]));
		@:await assertAtom({ "created" : 1 }, tbl.indexCreate("ci", r.row["c"]));
		@:await assertAtom({ "created" : 1 }, tbl.indexCreate("idi", r.row["id"]));
		@:await assertAtom({ "created" : 1 }, tbl.indexCreate("kdi", [r.row["id"]]));
		@:await assertAtom({ "created" : 1 }, tbl.indexCreate("mi", r.row["m"], { "multi" : true }));
		@:await assertAtom({ "created" : 1 }, tbl.indexCreate("brokeni", r.row["broken"]));
		@:await assertAtom(null, tbl.get([]));
		@:await assertAtom(null, tbl.get(-1));
		@:await assertAtom(1, tbl.get(1)["id"]);
		@:await assertAtom("SELECTION<OBJECT>", tbl.get(1).typeOf());
		@:await assertAtom({ "replaced" : 0, "skipped" : 0, "deleted" : 0, "unchanged" : 1, "errors" : 0, "inserted" : 0 }, tbl.get(1).update(function(x) return null));
		@:await assertError("ReqlCompileError", "Expected 2 arguments but found 3.", tbl.get(1, "ai"));
		@:await assertAtom([], tbl.getAll(-1, { "index" : "id" }));
		@:await assertAtom([], tbl.getAll(-1));
		@:await assertAtom([], tbl.getAll([-1]));
		@:await assertAtom(1, tbl.getAll(1, { "index" : "id" })[0]["id"]);
		@:await assertAtom(1, tbl.getAll(1)[0]["id"]);
		@:await assertAtom(bag([1, 2, 3]), tbl.getAll(1, 2, 3, { "index" : "id" }).map(function(x) return x["id"]).coerceTo("ARRAY"));
		@:await assertAtom(bag([1, 2, 3]), tbl.getAll(1, 2, 3).map(function(x) return x["id"]).coerceTo("ARRAY"));
		@:await assertAtom("SELECTION<STREAM>", tbl.getAll(1, { "index" : "id" }).typeOf());
		@:await assertAtom("SELECTION<STREAM>", tbl.getAll(1).typeOf());
		@:await assertAtom({ "replaced" : 0, "skipped" : 0, "deleted" : 0, "unchanged" : 1, "errors" : 0, "inserted" : 0 }, tbl.getAll(1, { "index" : "id" }).update(function(x) return null));
		@:await assertAtom({ "replaced" : 0, "skipped" : 0, "deleted" : 0, "unchanged" : 1, "errors" : 0, "inserted" : 0 }, tbl.getAll(1).update(function(x) return null));
		@:await assertAtom({ "replaced" : 0, "skipped" : 0, "deleted" : 0, "unchanged" : 3, "errors" : 0, "inserted" : 0 }, tbl.getAll(1, 2, 3, { "index" : "id" }).update(function(x) return null));
		@:await assertAtom({ "replaced" : 0, "skipped" : 0, "deleted" : 0, "unchanged" : 3, "errors" : 0, "inserted" : 0 }, tbl.getAll(1, 2, 3).update(function(x) return null));
		@:await assertErrorRegex("ReqlOpFailedError", "Index `fake` was not found on table `[a-zA-Z0-9_]+.[a-zA-Z0-9_]+`[.]", tbl.getAll(0, { "index" : "fake" }));
		@:await assertError("ReqlQueryLogicError", "Cannot use a geospatial index with `get_all`. Use `get_intersecting` instead.", tbl.getAll(r.point(0, 0)));
		@:await assertError("ReqlQueryLogicError", "Expected type STRING but found BOOL.", tbl.getAll(0, { "index" : false }));
		@:await assertAtom([], tbl.getAll([], { "index" : "id" }));
		@:await assertAtom([], tbl.getAll([], { "index" : "idi" }));
		@:await assertAtom(1, tbl.getAll(1, { "index" : "id" })[0]["id"]);
		@:await assertAtom(1, tbl.getAll(1, { "index" : "idi" })[0]["id"]);
		@:await assertAtom([], tbl.getAll(1, { "index" : "ai" }));
		@:await assertAtom([3], tbl.getAll(1, { "index" : "bi" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertError("ReqlQueryLogicError", "Indexed order_by can only be performed on a TABLE or TABLE_SLICE. Make sure order_by comes before any transformations (such as map) or filters.", tbl.getAll(1, { "index" : "bi" }).orderBy({ "index" : "id" }).map(function(x) return x["id"]));
		@:await assertError("ReqlQueryLogicError", "Expected type TABLE_SLICE but found SELECTION:", tbl.getAll(1, { "index" : "bi" }).between(1, 1, { "index" : "id" }).map(function(x) return x["id"]));
		@:await assertAtom([2, 3], tbl.getAll(1, { "index" : "ci" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom("SELECTION<STREAM>", tbl.getAll(1, { "index" : "ci" }).typeOf());
		@:await assertAtom({ "replaced" : 0, "skipped" : 0, "deleted" : 0, "unchanged" : 2, "errors" : 0, "inserted" : 0 }, tbl.getAll(1, { "index" : "ci" }).update(function(x) return null));
		@:await assertAtom([], tbl.getAll(1, { "index" : "brokeni" }));
		@:await assertAtom([rows[0]], tbl.getAll(1, { "index" : "mi" }));
		@:await assertAtom([rows[0]], tbl.getAll(2, { "index" : "mi" }));
		@:await assertAtom([rows[1]], tbl.getAll(5, { "index" : "mi" }));
		@:await assertAtom([rows[2]], tbl.getAll(7, { "index" : "mi" }));
		@:await assertErrorRegex("ReqlOpFailedError", "Index `fake` was not found on table `[a-zA-Z0-9_]+.[a-zA-Z0-9_]+`[.]", tbl.eqJoin("id", tbl, { "index" : "fake" }));
		@:await assertError("ReqlQueryLogicError", "Expected type STRING but found BOOL.", tbl.eqJoin("id", tbl, { "index" : false }));
		@:await assertAtom([{ "left" : rows[1], "right" : rows[0] }], tbl.filter({ "id" : 1 }).eqJoin("id", tbl, { "index" : "mi" }));
		@:await assertAtom([{ "left" : rows[0], "right" : rows[0] }], tbl.filter({ "id" : 0 }).eqJoin("id", tbl));
		@:await assertAtom([{ "left" : rows[0], "right" : rows[0] }], tbl.filter({ "id" : 0 }).eqJoin(function(x) return x["id"], tbl));
		@:await assertAtom([{ "left" : rows[0], "right" : rows[0] }], tbl.filter({ "id" : 0 }).eqJoin("id", tbl, { "index" : "id" }));
		@:await assertAtom([{ "left" : rows[0], "right" : rows[0] }], tbl.filter({ "id" : 0 }).eqJoin(function(x) return x["id"], tbl, { "index" : "id" }));
		@:await assertAtom([{ "left" : rows[0], "right" : rows[0] }], tbl.filter({ "id" : 0 }).eqJoin("id", tbl, { "index" : "idi" }));
		@:await assertAtom([{ "left" : rows[0], "right" : rows[0] }], tbl.filter({ "id" : 0 }).eqJoin(function(x) return x["id"], tbl, { "index" : "idi" }));
		@:await assertAtom([{ "right" : rows[0], "left" : rows[0] }, { "right" : rows[1], "left" : rows[0] }, { "right" : rows[2], "left" : rows[0] }, { "right" : rows[3], "left" : rows[0] }], tbl.filter({ "id" : 0 }).eqJoin("id", tbl, { "index" : "ai" }).orderBy("right"));
		@:await assertAtom(([{ "right" : rows[0], "left" : rows[0] }, { "right" : rows[1], "left" : rows[0] }, { "right" : rows[2], "left" : rows[0] }]), tbl.filter({ "id" : 0 }).eqJoin("id", tbl, { "index" : "bi" }).orderBy("right"));
		@:await assertAtom([{ "right" : rows[0], "left" : rows[0] }, { "right" : rows[1], "left" : rows[0] }], tbl.filter({ "id" : 0 }).eqJoin("id", tbl, { "index" : "ci" }).orderBy("right"));
		@:await assertAtom([], tbl.filter({ "id" : 0 }).eqJoin("id", tbl, { "index" : "brokeni" }));
		@:await assertAtom([{ "left" : rows[0], "right" : rows[0] }, { "left" : rows[1], "right" : rows[0] }, { "left" : rows[0], "right" : rows[1] }, { "left" : rows[1], "right" : rows[1] }, { "left" : rows[0], "right" : rows[2] }, { "left" : rows[1], "right" : rows[2] }, { "left" : rows[2], "right" : rows[3] }, { "left" : rows[3], "right" : rows[3] }], tbl.eqJoin("c", tbl, { "index" : "bi" }).orderBy("right", "left"));
		@:await assertError("ReqlQueryLogicError", "Index name conflict: `id` is the name of the primary key.", tbl.indexCreate("id"));
		@:await assertAtom({ "created" : 1 }, tbl.indexCreate("c"));
		@:await assertAtom({ "created" : 1 }, tbl.indexCreate("broken"));
		@:await assertAtom([2, 3], tbl.getAll(1, { "index" : "c" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.getAll(1, { "index" : "broken" }).orderBy("broken").map(function(x) return x["id"]));
		@:await assertAtom({ "created" : 1 }, tbl.indexCreate("nil", function(x) return null));
		@:await assertError("ReqlNonExistenceError", "Keys cannot be NULL.", tbl.getAll(null, { "index" : "nil" }));
		@:await assertAtom({ "deleted" : 0, "inserted" : 1, "skipped" : 0, "errors" : 0, "replaced" : 0, "unchanged" : 0 }, tbl.insert({ "id" : 4, "a" : 4, "b" : 4, "c" : 4, "m" : [14, 15, 16] }));
		@:await assertAtom([{ "right" : rows[0], "left" : rows[0] }, { "right" : rows[1], "left" : rows[0] }, { "right" : rows[2], "left" : rows[1] }, { "right" : rows[3], "left" : rows[1] }, { "right" : rows[4], "left" : rows[4] }], tbl.eqJoin("id", tbl, { "index" : "c" }).orderBy("left", "right").coerceTo("ARRAY"));
		@:await assertAtom([{ "right" : rows[0], "left" : rows[0] }, { "right" : rows[1], "left" : rows[0] }, { "right" : rows[2], "left" : rows[1] }, { "right" : rows[3], "left" : rows[1] }, { "right" : rows[4], "left" : rows[4] }], tbl.eqJoin("id", tbl, { "index" : "ci" }).orderBy("left", "right"));
		@:await assertError("ReqlQueryLogicError", "Cannot use `nu" + "ll` in BETWEEN, use `r.minval` or `r.maxval` to denote unboundedness.", tbl.between(null, 2, { "index" : "id" }).count());
		@:await assertError("ReqlQueryLogicError", "Cannot use `nu" + "ll` in BETWEEN, use `r.minval` or `r.maxval` to denote unboundedness.", tbl.between(2, null, { "index" : "id" }).count());
		@:await assertError("ReqlQueryLogicError", "Cannot use `nu" + "ll` in BETWEEN, use `r.minval` or `r.maxval` to denote unboundedness.", tbl.between(null, null, { "index" : "id" }).count());
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(r.minval, r.maxval).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(r.minval, r.maxval).orderBy({ "index" : "id" }).map(function(x) return x["id"]));
		@:await assertError("ReqlQueryLogicError", "Cannot perform multiple BETWEENs on the same table.", tbl.between(r.minval, r.maxval).between(r.minval, r.maxval).map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2], tbl.orderBy({ "index" : "id" }).between(r.minval, 3).map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(0, r.maxval).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3], tbl.between(r.minval, 4).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3], tbl.between(0, 4).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(-1, 5).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(5, 5).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(5, r.maxval).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(-1, -1).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(r.minval, -1).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(r.minval, r.maxval, { "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(0, r.maxval, { "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(r.minval, 4, { "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(0, 4, { "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(-1, 5, { "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(5, 5, { "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(5, r.maxval, { "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(-1, -1, { "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(r.minval, -1, { "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(r.minval, r.maxval, { "index" : "id" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(0, r.maxval, { "index" : "id" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3], tbl.between(r.minval, 4, { "index" : "id" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3], tbl.between(0, 4, { "index" : "id" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(-1, 5, { "index" : "id" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(5, 5, { "index" : "id" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(5, r.maxval, { "index" : "id" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(-1, -1, { "index" : "id" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(r.minval, -1, { "index" : "id" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(r.minval, r.maxval, { "index" : "id", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(0, r.maxval, { "index" : "id", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(r.minval, 4, { "index" : "id", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(0, 4, { "index" : "id", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(-1, 5, { "index" : "id", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(5, 5, { "index" : "id", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(5, r.maxval, { "index" : "id", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(-1, -1, { "index" : "id", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(r.minval, -1, { "index" : "id", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(r.minval, r.maxval, { "index" : "idi" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(0, r.maxval, { "index" : "idi" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3], tbl.between(r.minval, 4, { "index" : "idi" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3], tbl.between(0, 4, { "index" : "idi" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(-1, 5, { "index" : "idi" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(5, 5, { "index" : "idi" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(5, r.maxval, { "index" : "idi" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(-1, -1, { "index" : "idi" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(r.minval, -1, { "index" : "idi" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(r.minval, r.maxval, { "index" : "idi", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(0, r.maxval, { "index" : "idi", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(r.minval, 4, { "index" : "idi", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(0, 4, { "index" : "idi", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(-1, 5, { "index" : "idi", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(5, 5, { "index" : "idi", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(5, r.maxval, { "index" : "idi", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(-1, -1, { "index" : "idi", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(r.minval, -1, { "index" : "idi", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(r.minval, r.maxval, { "index" : "ai" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(0, r.maxval, { "index" : "ai" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3], tbl.between(r.minval, 4, { "index" : "ai" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3], tbl.between(0, 4, { "index" : "ai" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(0, 5, { "index" : "ai" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(r.minval, r.maxval, { "index" : "ai", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(0, r.maxval, { "index" : "ai", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(r.minval, 4, { "index" : "ai", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(0, 4, { "index" : "ai", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(0, 5, { "index" : "ai", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3], tbl.between(0, 3, { "index" : "ai" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3], tbl.between(0, 1, { "index" : "ai" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(0, 0, { "index" : "ai" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3], tbl.between(-1, 2, { "index" : "ai" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3], tbl.between(0, 3, { "index" : "ai", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3], tbl.between(0, 1, { "index" : "ai", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3], tbl.between(0, 0, { "index" : "ai", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3], tbl.between(-1, 2, { "index" : "ai", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(1, 1, { "index" : "ai" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([4], tbl.between(1, r.maxval, { "index" : "ai" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(5, r.maxval, { "index" : "ai" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(r.minval, 0, { "index" : "ai" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(-1, -1, { "index" : "ai" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(r.minval, -1, { "index" : "ai" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(1, 1, { "index" : "ai", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([4], tbl.between(1, r.maxval, { "index" : "ai", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(5, r.maxval, { "index" : "ai", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3], tbl.between(r.minval, 0, { "index" : "ai", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(-1, -1, { "index" : "ai", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(r.minval, -1, { "index" : "ai", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1], tbl.between(0, 1, { "index" : "c" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1], tbl.between(-1, 1, { "index" : "c" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1], tbl.between(r.minval, 1, { "index" : "c" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(0, r.maxval, { "index" : "c" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(-1, r.maxval, { "index" : "c" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(r.minval, r.maxval, { "index" : "c" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([2, 3, 4], tbl.between(1, r.maxval, { "index" : "c" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(1, 1, { "index" : "c" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3], tbl.between(0, 1, { "index" : "c", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3], tbl.between(-1, 1, { "index" : "c", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3], tbl.between(r.minval, 1, { "index" : "c", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(0, r.maxval, { "index" : "c", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(-1, r.maxval, { "index" : "c", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(r.minval, r.maxval, { "index" : "c", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([2, 3, 4], tbl.between(1, r.maxval, { "index" : "c", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([2, 3], tbl.between(1, 1, { "index" : "c", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom({ "created" : 1 }, tbl.indexCreate("bc", function(row) return [row["b"], row["c"]]));
		@:await assertAtom({ "created" : 1 }, tbl.indexCreate("cb", function(row) return [row["c"], row["b"]]));
		@:await assertAtom([], tbl.between(r.minval, [0, 0], { "index" : "bc" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between(r.minval, [0, 0], { "index" : "cb" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1], tbl.between(r.minval, [0, 1], { "index" : "bc" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1], tbl.between(r.minval, [0, 1], { "index" : "cb" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2], tbl.between(r.minval, [1, 0], { "index" : "bc" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1], tbl.between(r.minval, [1, 0], { "index" : "cb" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2], tbl.between(r.minval, [1, 1], { "index" : "bc" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2], tbl.between(r.minval, [1, 1], { "index" : "cb" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(r.minval, r.maxval, { "index" : "bc" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(r.minval, r.maxval, { "index" : "cb" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1], tbl.between(r.minval, [0, 0], { "index" : "bc", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1], tbl.between(r.minval, [0, 0], { "index" : "cb", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2], tbl.between(r.minval, [0, 1], { "index" : "bc", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1], tbl.between(r.minval, [0, 1], { "index" : "cb", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2], tbl.between(r.minval, [1, 0], { "index" : "bc", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2], tbl.between(r.minval, [1, 0], { "index" : "cb", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3], tbl.between(r.minval, [1, 1], { "index" : "bc", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3], tbl.between(r.minval, [1, 1], { "index" : "cb", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(r.minval, r.maxval, { "index" : "bc", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between(r.minval, r.maxval, { "index" : "cb", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([0, 0], [0, 0], { "index" : "bc" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([0, 0], [0, 0], { "index" : "cb" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1], tbl.between([0, 0], [0, 1], { "index" : "bc" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1], tbl.between([0, 0], [0, 1], { "index" : "cb" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2], tbl.between([0, 0], [1, 0], { "index" : "bc" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1], tbl.between([0, 0], [1, 0], { "index" : "cb" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2], tbl.between([0, 0], [1, 1], { "index" : "bc" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2], tbl.between([0, 0], [1, 1], { "index" : "cb" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between([0, 0], r.maxval, { "index" : "bc" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between([0, 0], r.maxval, { "index" : "cb" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1], tbl.between([0, 0], [0, 0], { "index" : "bc", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1], tbl.between([0, 0], [0, 0], { "index" : "cb", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2], tbl.between([0, 0], [0, 1], { "index" : "bc", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1], tbl.between([0, 0], [0, 1], { "index" : "cb", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2], tbl.between([0, 0], [1, 0], { "index" : "bc", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2], tbl.between([0, 0], [1, 0], { "index" : "cb", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3], tbl.between([0, 0], [1, 1], { "index" : "bc", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3], tbl.between([0, 0], [1, 1], { "index" : "cb", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between([0, 0], r.maxval, { "index" : "bc", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 1, 2, 3, 4], tbl.between([0, 0], r.maxval, { "index" : "cb", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([0, 1], [0, 0], { "index" : "bc" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([0, 1], [0, 0], { "index" : "cb" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([0, 1], [0, 1], { "index" : "bc" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([0, 1], [0, 1], { "index" : "cb" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([2], tbl.between([0, 1], [1, 0], { "index" : "bc" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([0, 1], [1, 0], { "index" : "cb" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([2], tbl.between([0, 1], [1, 1], { "index" : "bc" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([2], tbl.between([0, 1], [1, 1], { "index" : "cb" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([2, 3, 4], tbl.between([0, 1], r.maxval, { "index" : "bc" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([2, 3, 4], tbl.between([0, 1], r.maxval, { "index" : "cb" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([0, 1], [0, 0], { "index" : "bc", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([0, 1], [0, 0], { "index" : "cb", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([2], tbl.between([0, 1], [0, 1], { "index" : "bc", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([0, 1], [0, 1], { "index" : "cb", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([2], tbl.between([0, 1], [1, 0], { "index" : "bc", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([2], tbl.between([0, 1], [1, 0], { "index" : "cb", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([2, 3], tbl.between([0, 1], [1, 1], { "index" : "bc", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([2, 3], tbl.between([0, 1], [1, 1], { "index" : "cb", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([2, 3, 4], tbl.between([0, 1], r.maxval, { "index" : "bc", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([2, 3, 4], tbl.between([0, 1], r.maxval, { "index" : "cb", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([1, 0], [0, 0], { "index" : "bc" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([1, 0], [0, 0], { "index" : "cb" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([1, 0], [0, 1], { "index" : "bc" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([1, 0], [0, 1], { "index" : "cb" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([1, 0], [1, 0], { "index" : "bc" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([1, 0], [1, 0], { "index" : "cb" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([1, 0], [1, 1], { "index" : "bc" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([2], tbl.between([1, 0], [1, 1], { "index" : "cb" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([3, 4], tbl.between([1, 0], r.maxval, { "index" : "bc" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([2, 3, 4], tbl.between([1, 0], r.maxval, { "index" : "cb" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([1, 0], [0, 0], { "index" : "bc", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([1, 0], [0, 0], { "index" : "cb", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([1, 0], [0, 1], { "index" : "bc", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([1, 0], [0, 1], { "index" : "cb", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([1, 0], [1, 0], { "index" : "bc", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([2], tbl.between([1, 0], [1, 0], { "index" : "cb", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([3], tbl.between([1, 0], [1, 1], { "index" : "bc", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([2, 3], tbl.between([1, 0], [1, 1], { "index" : "cb", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([3, 4], tbl.between([1, 0], r.maxval, { "index" : "bc", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([2, 3, 4], tbl.between([1, 0], r.maxval, { "index" : "cb", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([1, 1], [0, 0], { "index" : "bc" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([1, 1], [0, 0], { "index" : "cb" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([1, 1], [0, 1], { "index" : "bc" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([1, 1], [0, 1], { "index" : "cb" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([1, 1], [1, 0], { "index" : "bc" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([1, 1], [1, 0], { "index" : "cb" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([1, 1], [1, 1], { "index" : "bc" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([1, 1], [1, 1], { "index" : "cb" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([3, 4], tbl.between([1, 1], r.maxval, { "index" : "bc" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([3, 4], tbl.between([1, 1], r.maxval, { "index" : "cb" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([1, 1], [0, 0], { "index" : "bc", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([1, 1], [0, 0], { "index" : "cb", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([1, 1], [0, 1], { "index" : "bc", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([1, 1], [0, 1], { "index" : "cb", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([1, 1], [1, 0], { "index" : "bc", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([], tbl.between([1, 1], [1, 0], { "index" : "cb", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([3], tbl.between([1, 1], [1, 1], { "index" : "bc", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([3], tbl.between([1, 1], [1, 1], { "index" : "cb", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([3, 4], tbl.between([1, 1], r.maxval, { "index" : "bc", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([3, 4], tbl.between([1, 1], r.maxval, { "index" : "cb", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 0, 0], tbl.between(1, 3, { "index" : "mi", "right_bound" : "closed" }).map(function(x) return x["id"]));
		@:await assertAtom([0, 0, 0, 1, 1, 1, 2, 3, 3, 3, 4, 4, 4], tbl.between(1, 16, { "index" : "mi", "right_bound" : "closed" }).orderBy("id").map(function(x) return x["id"]));
		@:await assertAtom([0, 0, 0, 1, 1, 1, 2, 3, 3, 3, 4, 4, 4], tbl.orderBy({ "index" : "mi" }).map(function(x) return x["id"]));
		@:await assertAtom([2, 3], tbl.between(0, 1, { "index" : "c", "right_bound" : "closed", "left_bound" : "open" }).orderBy("id")["id"]);
		@:await assertAtom([1], tbl.between(0, 1, { "index" : "id", "right_bound" : "closed", "left_bound" : "open" }).orderBy("id")["id"]);
		@:await dropTables(_tables);
		return Noise;
	}
}