package geo;
import rethinkdb.RethinkDB.r;
import rethinkdb.reql.*;
using tink.CoreApi;

@:await class TestIntersection_inclusion extends TestBase {
	@:async
	override function test() {
		@:await assertAtom(true, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).intersects(r.point(1.5, 1.5)));
		@:await assertAtom(false, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).intersects(r.point(2.5, 2.5)));
		@:await assertAtom(false, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).polygonSub(r.polygon(([1.1, 1.1] : Array<Dynamic>), ([1.9, 1.1] : Array<Dynamic>), ([1.9, 1.9] : Array<Dynamic>), ([1.1, 1.9] : Array<Dynamic>))).intersects(r.point(1.5, 1.5)));
		@:await assertAtom(true, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).polygonSub(r.polygon(([1.1, 1.1] : Array<Dynamic>), ([1.9, 1.1] : Array<Dynamic>), ([1.9, 1.9] : Array<Dynamic>), ([1.1, 1.9] : Array<Dynamic>))).intersects(r.point(1.05, 1.05)));
		@:await assertAtom(true, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).intersects(r.point(2, 2)));
		@:await assertAtom(true, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).intersects(r.point(2, 1.5)));
		@:await assertAtom(true, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).intersects(r.line(([1.5, 1.5] : Array<Dynamic>), ([2, 2] : Array<Dynamic>))));
		@:await assertAtom(true, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).intersects(r.line(([1.5, 1.5] : Array<Dynamic>), ([2, 1.5] : Array<Dynamic>))));
		@:await assertAtom(true, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).polygonSub(r.polygon(([1.1, 1.1] : Array<Dynamic>), ([1.9, 1.1] : Array<Dynamic>), ([1.9, 1.9] : Array<Dynamic>), ([1.1, 1.9] : Array<Dynamic>))).intersects(r.point(1.1, 1.1)));
		@:await assertAtom(true, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).polygonSub(r.polygon(([1.1, 1.1] : Array<Dynamic>), ([1.9, 1.1] : Array<Dynamic>), ([1.9, 1.9] : Array<Dynamic>), ([1.1, 1.9] : Array<Dynamic>))).intersects(r.point(1.5, 1.1)));
		@:await assertAtom(false, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).intersects(r.line(([2, 2] : Array<Dynamic>), ([3, 3] : Array<Dynamic>))));
		@:await assertAtom(false, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).intersects(r.line(([2, 1.5] : Array<Dynamic>), ([3, 3] : Array<Dynamic>))));
		@:await assertAtom(true, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).intersects(r.line(([1.5, 1.5] : Array<Dynamic>), ([3, 3] : Array<Dynamic>))));
		@:await assertAtom(true, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).intersects(r.polygon(([1.2, 1.2] : Array<Dynamic>), ([1.8, 1.2] : Array<Dynamic>), ([1.8, 1.8] : Array<Dynamic>), ([1.2, 1.8] : Array<Dynamic>))));
		@:await assertAtom(true, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).intersects(r.polygon(([1.5, 1.5] : Array<Dynamic>), ([2.5, 1.5] : Array<Dynamic>), ([2.5, 2.5] : Array<Dynamic>), ([1.5, 2.5] : Array<Dynamic>))));
		@:await assertAtom(false, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).polygonSub(r.polygon(([1.1, 1.1] : Array<Dynamic>), ([1.9, 1.1] : Array<Dynamic>), ([1.9, 1.9] : Array<Dynamic>), ([1.1, 1.9] : Array<Dynamic>))).intersects(r.polygon(([1.2, 1.2] : Array<Dynamic>), ([1.8, 1.2] : Array<Dynamic>), ([1.8, 1.8] : Array<Dynamic>), ([1.2, 1.8] : Array<Dynamic>))));
		@:await assertAtom(false, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).polygonSub(r.polygon(([1.1, 1.1] : Array<Dynamic>), ([1.9, 1.1] : Array<Dynamic>), ([1.9, 1.9] : Array<Dynamic>), ([1.1, 1.9] : Array<Dynamic>))).intersects(r.polygon(([1.1, 1.1] : Array<Dynamic>), ([1.9, 1.1] : Array<Dynamic>), ([1.9, 1.9] : Array<Dynamic>), ([1.1, 1.9] : Array<Dynamic>))));
		@:await assertAtom(true, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).intersects(r.polygon(([2, 1.1] : Array<Dynamic>), ([3, 1.1] : Array<Dynamic>), ([3, 1.9] : Array<Dynamic>), ([2, 1.9] : Array<Dynamic>))));
		@:await assertAtom(false, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).intersects(r.polygon(([2, 2] : Array<Dynamic>), ([3, 2] : Array<Dynamic>), ([3, 3] : Array<Dynamic>), ([2, 3] : Array<Dynamic>))));
		@:await assertAtom(false, r.point(1, 1).intersects(r.point(1.5, 1.5)));
		@:await assertAtom(true, r.point(1, 1).intersects(r.point(1, 1)));
		@:await assertAtom(true, r.line(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>)).intersects(r.point(1, 1)));
		@:await assertAtom(true, r.line(([1, 1] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).intersects(r.point(1, 1.8)));
		@:await assertAtom(true, r.line(([1, 0] : Array<Dynamic>), ([2, 0] : Array<Dynamic>)).intersects(r.point(1.8, 0)));
		@:await assertAtom(false, r.line(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>)).intersects(r.point(1.5, 1.5)));
		@:await assertAtom(true, r.line(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>)).intersects(r.line(([2, 1] : Array<Dynamic>), ([3, 1] : Array<Dynamic>))));
		@:await assertAtom(2, r.expr(([r.point(1, 0), r.point(3, 0), r.point(2, 0)] : Array<Dynamic>)).intersects(r.line(([0, 0] : Array<Dynamic>), ([2, 0] : Array<Dynamic>))).count());
		@:await assertAtom(true, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).includes(r.point(1.5, 1.5)));
		@:await assertAtom(false, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).includes(r.point(2.5, 2.5)));
		@:await assertAtom(false, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).polygonSub(r.polygon(([1.1, 1.1] : Array<Dynamic>), ([1.9, 1.1] : Array<Dynamic>), ([1.9, 1.9] : Array<Dynamic>), ([1.1, 1.9] : Array<Dynamic>))).includes(r.point(1.5, 1.5)));
		@:await assertAtom(true, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).polygonSub(r.polygon(([1.1, 1.1] : Array<Dynamic>), ([1.9, 1.1] : Array<Dynamic>), ([1.9, 1.9] : Array<Dynamic>), ([1.1, 1.9] : Array<Dynamic>))).includes(r.point(1.05, 1.05)));
		@:await assertAtom(true, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).includes(r.point(2, 2)));
		@:await assertAtom(true, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).includes(r.point(2, 1.5)));
		@:await assertAtom(true, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).includes(r.line(([1.5, 1.5] : Array<Dynamic>), ([2, 2] : Array<Dynamic>))));
		@:await assertAtom(true, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).includes(r.line(([1.5, 1.5] : Array<Dynamic>), ([2, 1.5] : Array<Dynamic>))));
		@:await assertAtom(true, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).polygonSub(r.polygon(([1.1, 1.1] : Array<Dynamic>), ([1.9, 1.1] : Array<Dynamic>), ([1.9, 1.9] : Array<Dynamic>), ([1.1, 1.9] : Array<Dynamic>))).includes(r.point(1.1, 1.1)));
		@:await assertAtom(true, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).polygonSub(r.polygon(([1.1, 1.1] : Array<Dynamic>), ([1.9, 1.1] : Array<Dynamic>), ([1.9, 1.9] : Array<Dynamic>), ([1.1, 1.9] : Array<Dynamic>))).includes(r.point(1.5, 1.1)));
		@:await assertAtom(false, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).includes(r.line(([2, 2] : Array<Dynamic>), ([3, 3] : Array<Dynamic>))));
		@:await assertAtom(true, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).includes(r.line(([2, 1.5] : Array<Dynamic>), ([2, 2] : Array<Dynamic>))));
		@:await assertAtom(true, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).includes(r.line(([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>))));
		@:await assertAtom(false, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).includes(r.line(([1.5, 1.5] : Array<Dynamic>), ([3, 3] : Array<Dynamic>))));
		@:await assertAtom(true, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).includes(r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>))));
		@:await assertAtom(true, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).includes(r.polygon(([1.2, 1.2] : Array<Dynamic>), ([1.8, 1.2] : Array<Dynamic>), ([1.8, 1.8] : Array<Dynamic>), ([1.2, 1.8] : Array<Dynamic>))));
		@:await assertAtom(true, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).includes(r.polygon(([1.5, 1.5] : Array<Dynamic>), ([2, 1.5] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1.5, 2] : Array<Dynamic>))));
		@:await assertAtom(false, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).includes(r.polygon(([1.5, 1.5] : Array<Dynamic>), ([2.5, 1.5] : Array<Dynamic>), ([2.5, 2.5] : Array<Dynamic>), ([1.5, 2.5] : Array<Dynamic>))));
		@:await assertAtom(false, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).polygonSub(r.polygon(([1.1, 1.1] : Array<Dynamic>), ([1.9, 1.1] : Array<Dynamic>), ([1.9, 1.9] : Array<Dynamic>), ([1.1, 1.9] : Array<Dynamic>))).includes(r.polygon(([1.2, 1.2] : Array<Dynamic>), ([1.8, 1.2] : Array<Dynamic>), ([1.8, 1.8] : Array<Dynamic>), ([1.2, 1.8] : Array<Dynamic>))));
		@:await assertAtom(false, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).polygonSub(r.polygon(([1.1, 1.1] : Array<Dynamic>), ([1.9, 1.1] : Array<Dynamic>), ([1.9, 1.9] : Array<Dynamic>), ([1.1, 1.9] : Array<Dynamic>))).includes(r.polygon(([1.1, 1.1] : Array<Dynamic>), ([2, 1.1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1.1, 2] : Array<Dynamic>))));
		@:await assertAtom(false, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).includes(r.polygon(([2, 1.1] : Array<Dynamic>), ([3, 1.1] : Array<Dynamic>), ([3, 1.9] : Array<Dynamic>), ([2, 1.9] : Array<Dynamic>))));
		@:await assertAtom(false, r.polygon(([1, 1] : Array<Dynamic>), ([2, 1] : Array<Dynamic>), ([2, 2] : Array<Dynamic>), ([1, 2] : Array<Dynamic>)).includes(r.polygon(([2, 2] : Array<Dynamic>), ([3, 2] : Array<Dynamic>), ([3, 3] : Array<Dynamic>), ([2, 3] : Array<Dynamic>))));
		@:await assertAtom(1, r.expr(([r.polygon(([0, 0] : Array<Dynamic>), ([1, 1] : Array<Dynamic>), ([1, 0] : Array<Dynamic>)), r.polygon(([0, 1] : Array<Dynamic>), ([1, 2] : Array<Dynamic>), ([1, 1] : Array<Dynamic>))] : Array<Dynamic>)).includes(r.point(0, 0)).count());
		@:await assertError(err("ReqlQueryLogicError", "Expected geometry of type `Polygon` but found `Point`."), r.point(0, 0).includes(r.point(0, 0)));
		@:await assertError(err("ReqlQueryLogicError", "Expected geometry of type `Polygon` but found `LineString`."), r.line(([0, 0] : Array<Dynamic>), ([0, 1] : Array<Dynamic>)).includes(r.point(0, 0)));
		return Noise;
	}
}