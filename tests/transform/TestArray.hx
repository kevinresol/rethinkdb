package transform;
import rethinkdb.RethinkDB.r;
import rethinkdb.reql.*;
using tink.CoreApi;

@:await class TestArray extends TestBase {
	@:async
	override function test() {
		var arr = r.expr(([1, 2, 3] : Array<Dynamic>));
		var dupe_arr = r.expr(([1, 1, 2, 3] : Array<Dynamic>));
		var objArr = r.expr(([{ "a" : 1, "b" : "a" }, { "a" : 2, "b" : "b" }, { "a" : 3, "b" : "c" }] : Array<Dynamic>));
		var nestedObjArr = r.expr(([{ "a" : 1, "b" : { "c" : 1 } }, { "a" : 2, "b" : { "c" : 2 } }, { "a" : 3, "b" : { "c" : 3 } }] : Array<Dynamic>));
		@:await assertAtom(([1, 2, 3, 4] : Array<Dynamic>), arr.append(4));
		@:await assertAtom(([1, 2, 3, "a"] : Array<Dynamic>), arr.append("a"));
		@:await assertAtom(([0, 1, 2, 3] : Array<Dynamic>), arr.prepend(0));
		@:await assertAtom((["a", 1, 2, 3] : Array<Dynamic>), arr.prepend("a"));
		@:await assertAtom(([3] : Array<Dynamic>), arr.difference(([1, 2, 2] : Array<Dynamic>)));
		@:await assertAtom(([1, 2, 3] : Array<Dynamic>), arr.difference(([] : Array<Dynamic>)));
		@:await assertAtom(([1, 2, 3] : Array<Dynamic>), arr.difference((["foo", "bar"] : Array<Dynamic>)));
		@:await assertAtom(([1, 2, 3] : Array<Dynamic>), dupe_arr.setInsert(1));
		@:await assertAtom(([1, 2, 3, 4] : Array<Dynamic>), dupe_arr.setInsert(4));
		@:await assertAtom(([1, 2, 3, 4, 5] : Array<Dynamic>), dupe_arr.setUnion(([3, 4, 5, 5] : Array<Dynamic>)));
		@:await assertAtom(([1, 2, 3, 5, 6] : Array<Dynamic>), dupe_arr.setUnion(([5, 6] : Array<Dynamic>)));
		@:await assertAtom(([1, 2] : Array<Dynamic>), dupe_arr.setIntersection(([1, 1, 1, 2, 2] : Array<Dynamic>)));
		@:await assertAtom(([] : Array<Dynamic>), dupe_arr.setIntersection((["foo"] : Array<Dynamic>)));
		@:await assertAtom(([2, 3] : Array<Dynamic>), dupe_arr.setDifference(([1, 1, 1, 10] : Array<Dynamic>)));
		@:await assertAtom(([1, 3] : Array<Dynamic>), dupe_arr.setDifference(([2] : Array<Dynamic>)));
		@:await assertAtom(([2, 3] : Array<Dynamic>), arr.slice(1, 3));
		@:await assertAtom(([2, 3] : Array<Dynamic>), arr.slice(1, 2, { "right_bound" : "closed" }));
		@:await assertAtom(([1, 2] : Array<Dynamic>), arr.slice(0, 2));
		@:await assertAtom(([2, 3] : Array<Dynamic>), arr.slice(1));
		@:await assertAtom(([2] : Array<Dynamic>), arr.slice(-2, -1));
		@:await assertAtom(([2, 3] : Array<Dynamic>), arr.skip(1));
		@:await assertAtom(([3] : Array<Dynamic>), arr.skip(2));
		@:await assertAtom(([] : Array<Dynamic>), arr.skip(12));
		@:await assertAtom(([1, 2] : Array<Dynamic>), arr.limit(2));
		@:await assertAtom(([] : Array<Dynamic>), arr.limit(0));
		@:await assertAtom(([1, 2, 3] : Array<Dynamic>), arr.limit(12));
		@:await assertAtom(([{ "a" : 1, "b" : "a" }, { "a" : 2, "b" : "b" }, { "a" : 3, "b" : "c" }] : Array<Dynamic>), objArr.pluck("a", "b"));
		@:await assertAtom(([{ "a" : 1 }, { "a" : 2 }, { "a" : 3 }] : Array<Dynamic>), objArr.pluck("a"));
		@:await assertAtom(([{  }, {  }, {  }] : Array<Dynamic>), objArr.pluck());
		var wftst = objArr.union(objArr.pluck("a")).union(objArr.pluck("b")).union(([{ "a" : null }] : Array<Dynamic>));
		@:await assertAtom(([{ "a" : 1 }, { "a" : 2 }, { "a" : 3 }, { "a" : 1 }, { "a" : 2 }, { "a" : 3 }] : Array<Dynamic>), wftst.withFields("a"));
		@:await assertAtom(([{ "b" : "a" }, { "b" : "b" }, { "b" : "c" }, { "b" : "a" }, { "b" : "b" }, { "b" : "c" }] : Array<Dynamic>), wftst.withFields("b"));
		@:await assertAtom(([{ "a" : 1, "b" : "a" }, { "a" : 2, "b" : "b" }, { "a" : 3, "b" : "c" }] : Array<Dynamic>), wftst.withFields("a", "b"));
		@:await assertAtom(([{  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }] : Array<Dynamic>), wftst.withFields());
		var wftst2 = nestedObjArr.union(objArr.pluck({ "b" : "missing" })).union(nestedObjArr.pluck({ "b" : "c" }));
		@:await assertAtom(([{ "b" : { "c" : 1 } }, { "b" : { "c" : 2 } }, { "b" : { "c" : 3 } }, { "b" : { "c" : 1 } }, { "b" : { "c" : 2 } }, { "b" : { "c" : 3 } }] : Array<Dynamic>), wftst2.withFields({ "b" : "c" }));
		@:await assertError(err("ReqlQueryLogicError", "Invalid path argument `1`.", ([] : Array<Dynamic>)), wftst.withFields(1));
		@:await assertError(err("ReqlQueryLogicError", "Cannot perform has_fields on a non-object non-sequence `1`.", ([] : Array<Dynamic>)), r.expr(1).withFields());
		@:await assertAtom(([{  }, {  }, {  }] : Array<Dynamic>), objArr.without("a", "b"));
		@:await assertAtom(([{ "b" : "a" }, { "b" : "b" }, { "b" : "c" }] : Array<Dynamic>), objArr.without("a"));
		@:await assertAtom(([{ "a" : 1, "b" : "a" }, { "a" : 2, "b" : "b" }, { "a" : 3, "b" : "c" }] : Array<Dynamic>), objArr.without());
		@:await assertAtom(([2, 3, 4] : Array<Dynamic>), arr.map(function(v:Expr):Expr return v + 1));
		@:await assertAtom(6, arr.reduce(function(a:Expr, b:Expr):Expr return a + b));
		@:await assertAtom(6, arr.reduce(function(a:Expr, b:Expr):Expr return a + b));
		@:await assertAtom(12, arr.union(arr).reduce(function(a:Expr, b:Expr):Expr return a + b));
		@:await assertAtom(12, arr.union(arr).reduce(function(a:Expr, b:Expr):Expr return a + b));
		@:await assertAtom(([{ "a" : 2, "b" : "b" }] : Array<Dynamic>), objArr.filter(function(row:Expr):Expr return row["b"] == "b"));
		@:await assertAtom(([1, 2, 1, 2, 1, 2] : Array<Dynamic>), arr.concatMap(function(v:Expr):Expr return ([1, 2] : Array<Dynamic>)));
		@:await assertAtom(([{ "v" : 1 }, { "v2" : 2 }, { "v" : 2 }, { "v2" : 3 }, { "v" : 3 }, { "v2" : 4 }] : Array<Dynamic>), arr.concatMap(function(v:Expr):Expr return ([{ "v" : v }, { "v2" : v + 1 }] : Array<Dynamic>)));
		@:await assertAtom(([{ "a" : 1, "b" : "a" }, { "a" : 2, "b" : "b" }, { "a" : 3, "b" : "c" }] : Array<Dynamic>), objArr.orderBy("b"));
		@:await assertAtom(([{ "a" : 3, "b" : "c" }, { "a" : 2, "b" : "b" }, { "a" : 1, "b" : "a" }] : Array<Dynamic>), objArr.orderBy(r.desc("b")));
		@:await assertAtom(([{ "-a" : 1 }, { "-a" : 2 }] : Array<Dynamic>), r.expr(([{ "-a" : 1 }, { "-a" : 2 }] : Array<Dynamic>)).orderBy("-a"));
		@:await assertAtom(([1, 2, 3, 4] : Array<Dynamic>), r.expr(([1, 1, 2, 2, 2, 3, 4] : Array<Dynamic>)).distinct());
		@:await assertAtom(3, objArr.count());
		@:await assertAtom(([1, 2, 3, { "a" : 1, "b" : "a" }, { "a" : 2, "b" : "b" }, { "a" : 3, "b" : "c" }] : Array<Dynamic>), arr.union(objArr));
		@:await assertAtom(2, arr[1]);
		@:await assertAtom(2, arr.nth(1));
		@:await assertAtom(1, arr[0]);
		@:await assertAtom(true, r.expr(([] : Array<Dynamic>)).isEmpty());
		@:await assertAtom(false, arr.isEmpty());
		@:await assertAtom(true, arr.contains(2));
		@:await assertAtom(true, arr.contains(2, 3));
		@:await assertAtom(false, arr.contains(4));
		@:await assertAtom(false, arr.contains(2, 4));
		@:await assertAtom(false, arr.contains(2, 2));
		@:await assertAtom(true, arr.union(arr).contains(2, 2));
		@:await assertAtom(true, arr.contains(function(x:Expr):Expr return x == 2));
		@:await assertAtom(true, arr.contains(function(x:Expr):Expr return x == 2, function(x:Expr):Expr return x == 3));
		@:await assertAtom(false, arr.contains(function(x:Expr):Expr return x == 4));
		@:await assertAtom(false, arr.contains(function(x:Expr):Expr return x == 2, function(x:Expr):Expr return x == 4));
		@:await assertAtom(false, arr.contains(function(x:Expr):Expr return x == 2, function(x:Expr):Expr return x == 2));
		@:await assertAtom(true, arr.union(arr).contains(function(x:Expr):Expr return x == 2, function(x:Expr):Expr return x == 2));
		@:await assertAtom(([1, 3] : Array<Dynamic>), r.expr(([{ "a" : 1 }, { "b" : 2 }, { "a" : 3, "c" : 4 }] : Array<Dynamic>))["a"]);
		@:await assertError(err("ReqlQueryLogicError", "Cannot perform bracket on a non-object non-sequence `\"a\"`.", ([] : Array<Dynamic>)), r.expr(([{ "a" : 1 }, "a", { "b" : 2 }, { "a" : 3, "c" : 4 }] : Array<Dynamic>))["a"]);
		return Noise;
	}
}